(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "lodash/isEqual"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("lodash/isEqual"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.isEqual);
    global.apiField = mod.exports;
  }
})(this, function (_exports, _isEqual) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = apiField;
  _isEqual = _interopRequireDefault(_isEqual);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

  function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function apiField(params, api) {
    var formName = params.formName,
        state = params.formState,
        notifyWatchers = params.notifyWatchers,
        watch = params.watch;

    api.getFieldMeta = function (field, meta) {
      var allMeta = state.fields[field] ? state.fields[field].meta : {};
      return meta ? allMeta[meta] : allMeta;
    };

    api.getFieldValue = function (field) {
      return api.getDeepData("values.".concat(field));
    };

    api.watchFieldMeta = function (field, listener) {
      return watch("".concat(formName, "/field/").concat(field, "/meta"), listener);
    };

    api.notifyFieldMetaWatchers = function (field) {
      return notifyWatchers("".concat(formName, "/field/").concat(field, "/meta"), api.getFieldMeta(field));
    };

    api.changeFieldMeta = function (field, meta, value) {
      if (typeof meta === 'string') {
        if (!(0, _isEqual.default)(api.getFieldMeta(field)[meta], value)) {
          state.fields[field].meta = _objectSpread({}, state.fields[field].meta, _defineProperty({}, meta, value));
          api.notifyFieldMetaWatchers(field);
        }
      } else if (Object.keys(meta).some(function (key) {
        return !(0, _isEqual.default)(api.getFieldMeta(field)[key], meta[key]);
      })) {
        state.fields[field].meta = _objectSpread({}, state.fields[field].meta, meta);
        api.notifyFieldMetaWatchers(field);
      }
    };

    api.watchFieldValue = function (field, listener) {
      return watch("".concat(formName, "/field/").concat(field, "/value"), listener);
    };

    api.notifyFieldValueWatchers = function (field) {
      return notifyWatchers("".concat(formName, "/field/").concat(field, "/value"), api.getFieldValue(field));
    };

    api.updateFieldErrors = function (errors) {
      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          extraFieldMeta = _ref.extraFieldMeta,
          isServerSideError = _ref.isServerSideError,
          fieldJustChanged = _ref.fieldJustChanged;

      api.forEachField(function (field) {
        if (!api.getFieldMeta(field, 'isServerSideError') || field === fieldJustChanged) {
          var payload = _objectSpread({}, extraFieldMeta);

          var fieldErrors = errors ? errors[field] : undefined;

          if (fieldErrors) {
            payload.invalid = true;
            payload.error = fieldErrors;
            payload.isServerSideError = isServerSideError;
          } else {
            payload.invalid = false;
            payload.error = undefined;
          }

          api.changeFieldMeta(field, payload);
        }
      });
    }; // Validation API


    api.validateForm = function () {
      var extraFieldMeta = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var validator = api.getDeepData('props.validate');

      if (typeof validator === 'function') {
        var _ref2 = validator(api.getFormValues()) || {},
            errors = _ref2.errors,
            rest = _objectWithoutProperties(_ref2, ["errors"]);

        api.updateFieldErrors(errors, {
          extraFieldMeta: extraFieldMeta
        });

        if (errors && Object.values(errors).some(function (err) {
          return err;
        })) {
          return _objectSpread({
            errors: errors
          }, rest);
        }
      } else {
        api.forEachField(function (field) {
          if (!api.getFieldMeta(field, 'visited')) {
            api.changeFieldMeta(field, {
              visited: true
            });
          }
        });
      }
    };

    api.registerField = function (field) {
      var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      state.fields[field] = {
        lastAsyncValidation: {},
        meta: {},
        props: props
      }; // syncValidateField(field);

      return function () {// @TODO: Decide about unregistering fields
      };
    };

    api.changeFieldValue = function (field, value) {
      state.fields[field].meta.isServerSideError = false;

      if (typeof value === 'function') {
        api.setDeepData("values.".concat(field), value(api.getFieldValue(field), api.getFormValues()));
      } else {
        api.setDeepData("values.".concat(field), value);
      }

      api.validateForm();
      api.notifyFieldValueWatchers(field);
      api.notifyFormValuesWatchers();

      if (api.getDeepData('props.visitOnChange') && !api.getFieldMeta(field, 'visited')) {
        api.changeFieldMeta(field, {
          visited: true
        });
      }
    };

    api.focusField = function (field) {
      if (!api.getFieldMeta(field, 'active')) {
        api.changeFieldMeta(field, {
          active: true
        });
      }
    };

    api.blurField = function (field) {
      var payload = {};

      if (api.getDeepData('props.visitOnBlur') && !api.getFieldMeta(field, 'visited')) {
        payload.visited = true;
      }

      if (api.getFieldMeta(field, 'active')) {
        payload.active = false;
      }

      if (Object.keys(payload).length > 0) {
        api.changeFieldMeta(field, payload);
      }
    };

    api.forEachField = function (callback) {
      var fields = Object.keys(api.getFlatData('fields'));

      for (var i = 0; i < fields.length; i++) {
        callback(fields[i]);
      }
    };
  }
});