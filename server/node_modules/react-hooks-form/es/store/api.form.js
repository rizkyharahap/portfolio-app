(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "lodash/clone"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("lodash/clone"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.clone);
    global.apiForm = mod.exports;
  }
})(this, function (_exports, _clone) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = apiForm;
  _clone = _interopRequireDefault(_clone);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function apiForm(params, api) {
    var onDestroy = params.onDestroy;

    api.setInitialValues = function () {
      var values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      api.setFlatData('values', (0, _clone.default)(values));
      api.setFlatData('lastInitializedValues', (0, _clone.default)(values));
      api.validateForm();
    }; // @TODO: Support keepDirty
    // @TODO: setIsVisitedAndNotify(false)


    api.initialize = function (values) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var mergedOptions = _objectSpread({
        unvisitFields: false
      }, options);

      api.setInitialValues(typeof values === 'function' ? values(api.getFormValues()) : values);
      api.forEachField(api.notifyFieldValueWatchers);
      api.notifyFormValuesWatchers();
      api.validateForm({
        visited: !mergedOptions.unvisitFields
      }); // @TODO: Reset fields meta
    };

    api.isInitialized = function () {
      return !api.getFlatData('lastInitializedValues');
    };

    api.reset = function () {
      api.initialize((0, _clone.default)(api.getFlatData('lastInitializedValues')), {
        unvisitFields: true
      });
    };

    api.submitting = function () {
      api.changeFormMeta({
        submitting: true
      });
    };

    api.submitFailed = function (error) {
      api.changeFormMeta({
        result: undefined,
        submitting: false,
        submitSucceeded: false,
        submitFailed: true,
        error: error
      });
    };

    api.submitSucceeded = function (result) {
      api.changeFormMeta({
        result: result,
        submitting: false,
        submitSucceeded: true,
        submitFailed: false,
        error: undefined
      });
    };

    api.submit = function () {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var error = api.validateForm({
        visited: true
      });

      if (typeof error !== 'undefined') {
        api.submitFailed(error);
      } else {
        var onSubmit = api.getDeepData('props.onSubmit');
        var onFail = api.getDeepData('props.onFail');
        var onSucceed = api.getDeepData('props.onSucceed');
        var onComplete = api.getDeepData('props.onComplete');
        api.submitting();
        api.forEachField(function (field) {
          if (!api.getFieldMeta(field, 'visited')) {
            api.changeFieldMeta(field, 'visited', true);
          }
        });
        onSubmit(api.getFormValues()).then(function (result) {
          api.submitSucceeded(result);

          if (typeof params.onSucceed === 'function') {
            params.onSucceed(result);
          }

          if (typeof onSucceed === 'function') {
            onSucceed(result);
          }

          if (typeof params.onComplete === 'function') {
            params.onComplete();
          }

          if (typeof onComplete === 'function') {
            onComplete();
          }
        }).catch(function (error) {
          if (error && error.errors) {
            api.updateFieldErrors(error.errors, {
              isServerSideError: true
            });
          }

          api.submitFailed(error);

          if (typeof params.onFail === 'function') {
            params.onFail(error);
          }

          if (typeof onFail === 'function') {
            onFail(error);
          }

          if (typeof params.onComplete === 'function') {
            params.onComplete();
          }

          if (typeof onComplete === 'function') {
            onComplete();
          }
        });
      }
    };

    api.destroy = function () {
      onDestroy();
      api.forEachField(function (field) {
        api.notifyFieldValueWatchers(field);
        api.notifyFieldMetaWatchers(field);
      });
      api.notifyFormValuesWatchers();
      api.notifyFormMetaWatchers();
    };
  }
});