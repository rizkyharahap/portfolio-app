(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "react", "lodash/clone", "./store", "./context"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("react"), require("lodash/clone"), require("./store"), require("./context"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.react, global.clone, global.store, global.context);
    global.hooks = mod.exports;
  }
})(this, function (_exports, _react, _clone, _store, _context) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.useForm = useForm;
  _exports.useFormApi = useFormApi;
  _exports.useFormMeta = useFormMeta;
  _exports.useFormValues = useFormValues;
  _exports.useFormFieldMeta = useFormFieldMeta;
  _exports.useFormFieldValue = useFormFieldValue;
  _clone = _interopRequireDefault(_clone);
  _store = _interopRequireDefault(_store);
  _context = _interopRequireDefault(_context);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

  function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

  function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

  function useFormApi(formName) {
    var formContext = (0, _react.useContext)(_context.default);
    var name = formName || (formContext ? formContext.name : '');
    var storeContext = (0, _store.default)();
    return storeContext.form(name);
  }

  function useForm(formName) {
    var form = useFormApi(formName);
    var realName = form.getName();
    return (0, _react.useMemo)(function () {
      return {
        getFieldValue: form.getFieldValue,
        changeFieldValue: form.changeFieldValue,
        getFieldMeta: form.getFieldMeta,
        changeFieldMeta: form.changeFieldMeta,
        getMeta: form.getFormMeta,
        getValues: form.getFormValues,
        initialize: form.initialize,
        reset: form.reset,
        submit: form.submit
      };
    }, [realName]);
  }

  function useFormFieldMeta(fieldName, formName) {
    var form = useFormApi(formName);

    var _useState = (0, _react.useState)(form.getFieldMeta(fieldName)),
        _useState2 = _slicedToArray(_useState, 2),
        fieldMeta = _useState2[0],
        setFieldMeta = _useState2[1];

    (0, _react.useLayoutEffect)(function () {
      return form.watchFieldMeta(fieldName, function (meta) {
        setFieldMeta(meta);
      });
    }, [fieldName, formName]);
    return fieldMeta;
  }

  function useFormFieldValue(fieldName, formName) {
    var form = useFormApi(formName);

    var _useState3 = (0, _react.useState)(form.getFieldValue(fieldName)),
        _useState4 = _slicedToArray(_useState3, 2),
        fieldValue = _useState4[0],
        setFieldValue = _useState4[1];

    (0, _react.useLayoutEffect)(function () {
      return form.watchFieldValue(fieldName, function (value) {
        setFieldValue(value);
      });
    }, [fieldName, formName]);
    return fieldValue;
  }

  function useFormValues(formName) {
    var form = useFormApi(formName);

    var _useState5 = (0, _react.useState)(form.getFormValues()),
        _useState6 = _slicedToArray(_useState5, 2),
        values = _useState6[0],
        setValues = _useState6[1];

    (0, _react.useLayoutEffect)(function () {
      return form.watchFormValues(function (payload) {
        setValues((0, _clone.default)(payload));
      });
    }, [formName]);
    return values;
  }

  function useFormMeta(formName) {
    var form = useFormApi(formName);

    var _useState7 = (0, _react.useState)(form.getFormMeta()),
        _useState8 = _slicedToArray(_useState7, 2),
        data = _useState8[0],
        setData = _useState8[1];

    (0, _react.useLayoutEffect)(function () {
      return form.watchFormMeta(function (payload) {
        setData((0, _clone.default)(payload));
      });
    }, [formName]);
    return data;
  }
});